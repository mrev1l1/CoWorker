#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.0
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kurinnoy.DataBase_Logic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CoWorkerStaff")]
	public partial class CoWorkerStaffHandlersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertProjects(Projects instance);
    partial void UpdateProjects(Projects instance);
    partial void DeleteProjects(Projects instance);
    partial void InsertCoWorkers(CoWorkers instance);
    partial void UpdateCoWorkers(CoWorkers instance);
    partial void DeleteCoWorkers(CoWorkers instance);
    partial void InsertCoWorkerSpecializations(CoWorkerSpecializations instance);
    partial void UpdateCoWorkerSpecializations(CoWorkerSpecializations instance);
    partial void DeleteCoWorkerSpecializations(CoWorkerSpecializations instance);
    partial void InsertJobCategories(JobCategories instance);
    partial void UpdateJobCategories(JobCategories instance);
    partial void DeleteJobCategories(JobCategories instance);
    partial void InsertActiveProjects(ActiveProjects instance);
    partial void UpdateActiveProjects(ActiveProjects instance);
    partial void DeleteActiveProjects(ActiveProjects instance);
    #endregion
		
		public CoWorkerStaffHandlersDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CoWorkerStaffConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CoWorkerStaffHandlersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoWorkerStaffHandlersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoWorkerStaffHandlersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoWorkerStaffHandlersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Projects> Projects
		{
			get
			{
				return this.GetTable<Projects>();
			}
		}
		
		public System.Data.Linq.Table<CoWorkers> CoWorkers
		{
			get
			{
				return this.GetTable<CoWorkers>();
			}
		}
		
		public System.Data.Linq.Table<CoWorkerSpecializations> CoWorkerSpecializations
		{
			get
			{
				return this.GetTable<CoWorkerSpecializations>();
			}
		}
		
		public System.Data.Linq.Table<JobCategories> JobCategories
		{
			get
			{
				return this.GetTable<JobCategories>();
			}
		}
		
		public System.Data.Linq.Table<ActiveProjects> ActiveProjects
		{
			get
			{
				return this.GetTable<ActiveProjects>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _projectInfoFolderPath;
		
		private int _price;
		
		private EntitySet<ActiveProjects> _ActiveProjects;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnprojectInfoFolderPathChanging(string value);
    partial void OnprojectInfoFolderPathChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    #endregion
		
		public Projects()
		{
			this._ActiveProjects = new EntitySet<ActiveProjects>(new Action<ActiveProjects>(this.attach_ActiveProjects), new Action<ActiveProjects>(this.detach_ActiveProjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectInfoFolderPath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string projectInfoFolderPath
		{
			get
			{
				return this._projectInfoFolderPath;
			}
			set
			{
				if ((this._projectInfoFolderPath != value))
				{
					this.OnprojectInfoFolderPathChanging(value);
					this.SendPropertyChanging();
					this._projectInfoFolderPath = value;
					this.SendPropertyChanged("projectInfoFolderPath");
					this.OnprojectInfoFolderPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_ActiveProjects", Storage="_ActiveProjects", ThisKey="Id", OtherKey="projectID")]
		public EntitySet<ActiveProjects> ActiveProjects
		{
			get
			{
				return this._ActiveProjects;
			}
			set
			{
				this._ActiveProjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActiveProjects(ActiveProjects entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_ActiveProjects(ActiveProjects entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoWorkers")]
	public partial class CoWorkers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private string _phoneNumber;
		
		private string _email;
		
		private string _additionalInfo;
		
		private EntitySet<CoWorkerSpecializations> _CoWorkerSpecializations;
		
		private EntitySet<ActiveProjects> _ActiveProjects;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnadditionalInfoChanging(string value);
    partial void OnadditionalInfoChanged();
    #endregion
		
		public CoWorkers()
		{
			this._CoWorkerSpecializations = new EntitySet<CoWorkerSpecializations>(new Action<CoWorkerSpecializations>(this.attach_CoWorkerSpecializations), new Action<CoWorkerSpecializations>(this.detach_CoWorkerSpecializations));
			this._ActiveProjects = new EntitySet<ActiveProjects>(new Action<ActiveProjects>(this.attach_ActiveProjects), new Action<ActiveProjects>(this.detach_ActiveProjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_additionalInfo", DbType="NVarChar(1000)")]
		public string additionalInfo
		{
			get
			{
				return this._additionalInfo;
			}
			set
			{
				if ((this._additionalInfo != value))
				{
					this.OnadditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._additionalInfo = value;
					this.SendPropertyChanged("additionalInfo");
					this.OnadditionalInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoWorkers_CoWorkerSpecializations", Storage="_CoWorkerSpecializations", ThisKey="Id", OtherKey="coWorkerID")]
		public EntitySet<CoWorkerSpecializations> CoWorkerSpecializations
		{
			get
			{
				return this._CoWorkerSpecializations;
			}
			set
			{
				this._CoWorkerSpecializations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoWorkers_ActiveProjects", Storage="_ActiveProjects", ThisKey="Id", OtherKey="coWorkerID")]
		public EntitySet<ActiveProjects> ActiveProjects
		{
			get
			{
				return this._ActiveProjects;
			}
			set
			{
				this._ActiveProjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CoWorkerSpecializations(CoWorkerSpecializations entity)
		{
			this.SendPropertyChanging();
			entity.CoWorkers = this;
		}
		
		private void detach_CoWorkerSpecializations(CoWorkerSpecializations entity)
		{
			this.SendPropertyChanging();
			entity.CoWorkers = null;
		}
		
		private void attach_ActiveProjects(ActiveProjects entity)
		{
			this.SendPropertyChanging();
			entity.CoWorkers = this;
		}
		
		private void detach_ActiveProjects(ActiveProjects entity)
		{
			this.SendPropertyChanging();
			entity.CoWorkers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoWorkerSpecializations")]
	public partial class CoWorkerSpecializations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _categoryID;
		
		private int _coWorkerID;
		
		private EntityRef<CoWorkers> _CoWorkers;
		
		private EntityRef<JobCategories> _JobCategories;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    partial void OncoWorkerIDChanging(int value);
    partial void OncoWorkerIDChanged();
    #endregion
		
		public CoWorkerSpecializations()
		{
			this._CoWorkers = default(EntityRef<CoWorkers>);
			this._JobCategories = default(EntityRef<JobCategories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", DbType="Int NOT NULL")]
		public int categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					if (this._JobCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIDChanging(value);
					this.SendPropertyChanging();
					this._categoryID = value;
					this.SendPropertyChanged("categoryID");
					this.OncategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coWorkerID", DbType="Int NOT NULL")]
		public int coWorkerID
		{
			get
			{
				return this._coWorkerID;
			}
			set
			{
				if ((this._coWorkerID != value))
				{
					if (this._CoWorkers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncoWorkerIDChanging(value);
					this.SendPropertyChanging();
					this._coWorkerID = value;
					this.SendPropertyChanged("coWorkerID");
					this.OncoWorkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoWorkers_CoWorkerSpecializations", Storage="_CoWorkers", ThisKey="coWorkerID", OtherKey="Id", IsForeignKey=true)]
		public CoWorkers CoWorkers
		{
			get
			{
				return this._CoWorkers.Entity;
			}
			set
			{
				CoWorkers previousValue = this._CoWorkers.Entity;
				if (((previousValue != value) 
							|| (this._CoWorkers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoWorkers.Entity = null;
						previousValue.CoWorkerSpecializations.Remove(this);
					}
					this._CoWorkers.Entity = value;
					if ((value != null))
					{
						value.CoWorkerSpecializations.Add(this);
						this._coWorkerID = value.Id;
					}
					else
					{
						this._coWorkerID = default(int);
					}
					this.SendPropertyChanged("CoWorkers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobCategories_CoWorkerSpecializations", Storage="_JobCategories", ThisKey="categoryID", OtherKey="Id", IsForeignKey=true)]
		public JobCategories JobCategories
		{
			get
			{
				return this._JobCategories.Entity;
			}
			set
			{
				JobCategories previousValue = this._JobCategories.Entity;
				if (((previousValue != value) 
							|| (this._JobCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobCategories.Entity = null;
						previousValue.CoWorkerSpecializations.Remove(this);
					}
					this._JobCategories.Entity = value;
					if ((value != null))
					{
						value.CoWorkerSpecializations.Add(this);
						this._categoryID = value.Id;
					}
					else
					{
						this._categoryID = default(int);
					}
					this.SendPropertyChanged("JobCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobCategories")]
	public partial class JobCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _categoryName;
		
		private EntitySet<CoWorkerSpecializations> _CoWorkerSpecializations;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncategoryNameChanging(string value);
    partial void OncategoryNameChanged();
    #endregion
		
		public JobCategories()
		{
			this._CoWorkerSpecializations = new EntitySet<CoWorkerSpecializations>(new Action<CoWorkerSpecializations>(this.attach_CoWorkerSpecializations), new Action<CoWorkerSpecializations>(this.detach_CoWorkerSpecializations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string categoryName
		{
			get
			{
				return this._categoryName;
			}
			set
			{
				if ((this._categoryName != value))
				{
					this.OncategoryNameChanging(value);
					this.SendPropertyChanging();
					this._categoryName = value;
					this.SendPropertyChanged("categoryName");
					this.OncategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobCategories_CoWorkerSpecializations", Storage="_CoWorkerSpecializations", ThisKey="Id", OtherKey="categoryID")]
		public EntitySet<CoWorkerSpecializations> CoWorkerSpecializations
		{
			get
			{
				return this._CoWorkerSpecializations;
			}
			set
			{
				this._CoWorkerSpecializations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CoWorkerSpecializations(CoWorkerSpecializations entity)
		{
			this.SendPropertyChanging();
			entity.JobCategories = this;
		}
		
		private void detach_CoWorkerSpecializations(CoWorkerSpecializations entity)
		{
			this.SendPropertyChanging();
			entity.JobCategories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActiveProjects")]
	public partial class ActiveProjects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _coWorkerID;
		
		private int _projectID;
		
		private int _readiness;
		
		private EntityRef<CoWorkers> _CoWorkers;
		
		private EntityRef<Projects> _Projects;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncoWorkerIDChanging(int value);
    partial void OncoWorkerIDChanged();
    partial void OnprojectIDChanging(int value);
    partial void OnprojectIDChanged();
    partial void OnreadinessChanging(int value);
    partial void OnreadinessChanged();
    #endregion
		
		public ActiveProjects()
		{
			this._CoWorkers = default(EntityRef<CoWorkers>);
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coWorkerID", DbType="Int NOT NULL")]
		public int coWorkerID
		{
			get
			{
				return this._coWorkerID;
			}
			set
			{
				if ((this._coWorkerID != value))
				{
					if (this._CoWorkers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncoWorkerIDChanging(value);
					this.SendPropertyChanging();
					this._coWorkerID = value;
					this.SendPropertyChanged("coWorkerID");
					this.OncoWorkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectID", DbType="Int NOT NULL")]
		public int projectID
		{
			get
			{
				return this._projectID;
			}
			set
			{
				if ((this._projectID != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectIDChanging(value);
					this.SendPropertyChanging();
					this._projectID = value;
					this.SendPropertyChanged("projectID");
					this.OnprojectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_readiness", DbType="Int NOT NULL")]
		public int readiness
		{
			get
			{
				return this._readiness;
			}
			set
			{
				if ((this._readiness != value))
				{
					this.OnreadinessChanging(value);
					this.SendPropertyChanging();
					this._readiness = value;
					this.SendPropertyChanged("readiness");
					this.OnreadinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CoWorkers_ActiveProjects", Storage="_CoWorkers", ThisKey="coWorkerID", OtherKey="Id", IsForeignKey=true)]
		public CoWorkers CoWorkers
		{
			get
			{
				return this._CoWorkers.Entity;
			}
			set
			{
				CoWorkers previousValue = this._CoWorkers.Entity;
				if (((previousValue != value) 
							|| (this._CoWorkers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CoWorkers.Entity = null;
						previousValue.ActiveProjects.Remove(this);
					}
					this._CoWorkers.Entity = value;
					if ((value != null))
					{
						value.ActiveProjects.Add(this);
						this._coWorkerID = value.Id;
					}
					else
					{
						this._coWorkerID = default(int);
					}
					this.SendPropertyChanged("CoWorkers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_ActiveProjects", Storage="_Projects", ThisKey="projectID", OtherKey="Id", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.ActiveProjects.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.ActiveProjects.Add(this);
						this._projectID = value.Id;
					}
					else
					{
						this._projectID = default(int);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
